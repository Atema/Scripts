#!/usr/bin/env python3
# Copyright (c) 2022-2023 Martijn Atema

import os;
import sys;
from fastkml import kml, geometry;
from gpxpy import gpx;
from pyquery import PyQuery;


class GpsPoint:
    def __init__(self, time, lon, lat, elev):
        self.time = time;
        self.lon = lon;
        self.lat = lat;
        self.elev = elev;

    def __str__(self):
        return "{}, Lon: {}, Lat: {}, Elev: {}".format(self.time, self.lon, self.lat, self.elev);


def recursive_points(el):
    if hasattr(el, "features"):
        features = list(el.features());
        all = [];

        for f in features:
            all.extend(recursive_points(f));

        return all;

    elif hasattr(el, "geometry") and isinstance(el.geometry, geometry.Point):
        return [GpsPoint(
            el.timeStamp,
            el.geometry.x,
            el.geometry.y,
            el.geometry.z
        )];

    else:
        return [];


def process_file(in_path):
    print("Processing file: {}".format(in_path));
    in_file = open(in_path, "r")

    k = kml.KML();
    k.from_string(in_file.read().encode("utf-8"));

    flight_no = list(k.features())[0].name.split("/")[0].strip();
    desc_query = PyQuery(list(k.features())[0].description);
    orig_airport = desc_query("a>h3").eq(0).text().strip();
    dest_airport = desc_query("a>h3").eq(1).text().strip();

    points = recursive_points(k);
    flight_date = points[0].time.strftime("%Y.%m.%d - %H.%M")

    out_base = "{} - {} ({}-{})".format(flight_date, flight_no, orig_airport, dest_airport);
    out_path = out_base + ".gpx"
    print("Output to: {}".format(out_path));
    out_file = open(out_path, "w");

    g = gpx.GPX();
    g_track = gpx.GPXTrack();
    g.tracks.append(g_track);
    g_segment = gpx.GPXTrackSegment();
    g_track.segments.append(g_segment);

    for point in points:
        g_point = gpx.GPXTrackPoint(
            latitude=point.lat,
            longitude=point.lon,
            elevation=point.elev,
            time=point.time
        );
        g_segment.points.append(g_point);

    xml = g.to_xml();
    out_file.write(xml);

    in_file.close()
    out_file.close()

    os.rename(in_path, out_base + ".kml.html")




if __name__ == "__main__":
    for f in sys.argv[1:]:
        process_file(f);
